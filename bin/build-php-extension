#!/usr/bin/env python3

import argparse
import configparser
import json
import re
import shlex
import subprocess
import os
import sys
import urllib.request
from enum import Enum

STATE_FILENAME = ".build-php-extension.state.ini"
CONFIGURED_FOR_IMAGE_OPTION = "configured_for_image"

BASE_DIRECTORY = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))


class PhpVersionInfo:
    def __init__(self, minor_version, patch_version, version_id, filename):
        self.minor_version = minor_version
        self.patch_version = patch_version
        self.version_id = version_id
        self.filename = filename


def php_version_info_from_id(version_id, filename):
    patch = version_id % 100
    minor = int(version_id / 100) % 100
    major = int(version_id / 10000)

    return PhpVersionInfo(
        "%s.%s" % (major, minor),
        "%s.%s.%s" % (major, minor, patch),
        version_id,
        filename
    )


def php_version_info_from_versions(minor_version, patch_version, filename):
    match = re.fullmatch(r"(\d+)\.(\d+)\.(\d+)", patch_version)
    if not match:
        raise RuntimeError("Error parsing PHP version number %s" % patch_version)

    major = int(match.group(1))
    minor = int(match.group(2))
    patch = int(match.group(3))
    version_id = major * 10000 + minor * 100 + patch

    return PhpVersionInfo(
        minor_version,
        patch_version,
        version_id,
        filename
    )


def get_php_version_info(args):
    if args.php_git_branch:
        with urllib.request.urlopen(
                "https://raw.githubusercontent.com/php/php-src/%s/main/php_version.h" % args.php_git_branch) as response:
            for line in response:
                match = re.search(r"^#define PHP_VERSION_ID (\d+)$", line.decode("utf-8"))
                if match:
                    version_id = int(match.group(1))
                    return php_version_info_from_id(version_id, None)
        raise RuntimeError("Error parsing PHP version in branch %s" % args.php_git_branch)

    minor_version = args.php_version
    response = urllib.request.urlopen("https://www.php.net/releases/index.php?json&version=%s" % minor_version)
    data = json.load(response)
    if "version" not in data or "source" not in data:
        raise RuntimeError("Unknown PHP minor version %s" % minor_version)

    patch_version = data["version"]
    for source in data["source"]:
        if "filename" not in source:
            continue
        filename = source["filename"]
        if filename.endswith(".tar.xz"):
            return php_version_info_from_versions(minor_version, patch_version, filename)

    raise RuntimeError("PHP version %s has no .tar.xz source available" % patch_version)


class LinuxDistribution(Enum):
    ALPINE = "alpine"
    UBUNTU = "ubuntu"


def get_linux_distribution(args):
    if args.ubuntu:
        return LinuxDistribution.UBUNTU
    return LinuxDistribution.ALPINE


def get_image_name(args):
    linux_distribution = get_linux_distribution(args)
    return "".join([
        "build-php-extension:",
        "git-%s" % args.php_git_branch.replace("/", "_") if args.php_git_branch else args.php_version,
        "-%s" % linux_distribution.value,
        "-%s" % args.platform.replace("/", "_") if args.platform else "",
        "-clang" if args.clang else "",
        "-zts" if args.zts else "",
        "-asan" if args.address_sanitizer else "",
        "-ubsan" if args.undefined_sanitizer else "",
        "-release" if args.release else "-debug",
    ])


def ensure_image_exists(args):
    image_name = get_image_name(args)

    if not subprocess.check_output(["docker", "images", "--quiet", image_name]):
        build_image(args)


def run_in_docker_container(args, command, environment=None):
    if not environment:
        environment = {}

    image_name = get_image_name(args)

    ensure_image_exists(args)

    flags = [
        "--rm",
        "-v %s:%s" % (shlex.quote(os.getcwd()), shlex.quote("/src")),
        "-w %s" % shlex.quote("/src")
    ]
    if sys.stdin.isatty():
        flags.append("--interactive --tty")

    if args.platform:
        flags.append("--platform=%s" % shlex.quote(args.platform))

    if args.address_sanitizer:
        environment["ZEND_DONT_UNLOAD_MODULES"] = "1"

    for key, value in environment.items():
        flags.append("-e %s=%s" % (shlex.quote(key), shlex.quote(value)))

    if args.docker_network:
        flags.append("--network %s" % shlex.quote(args.docker_network))

    print("Executing command %s in docker container %s" % (command, image_name))
    subprocess.check_call(
        "docker run %s %s %s" % (" ".join(flags), shlex.quote(image_name), command),
        shell=True)


def build_image(args):
    version_info = get_php_version_info(args)
    image_name = get_image_name(args)
    linux_distribution = get_linux_distribution(args)

    flags = [
        "--file %s" % shlex.quote("%s/share/%s.dockerfile" % (BASE_DIRECTORY, linux_distribution.value)),
        "--tag %s" % shlex.quote(image_name),
    ]

    additional_config_args = []
    extension_cflags = []
    php_cflags = []
    php_ldflags = []
    php_test_args = []
    install_additional_packages = []

    if args.platform:
        flags.append("--platform=%s" % shlex.quote(args.platform))

    if args.php_git_branch:
        flags.append("--build-arg PHP_GIT_BRANCH=%s" % shlex.quote(args.php_git_branch))
    else:
        flags.append("--build-arg PHP_TARBALL_NAME=%s" % shlex.quote(version_info.filename))

    if version_info.version_id < 70205:
        # Composer 2.3.0 dropped support for PHP <7.2.5
        flags.append("--build-arg COMPOSER_TAG_NAME=2.2")

    if version_info.version_id < 80200:
        # PHP versions before 8.2 don't support OpenSSL version 3, which was added in Alpine 3.17 and Ubuntu 22.04
        flags.append("--build-arg ALPINE_TAG_NAME=3.16")
        flags.append("--build-arg UBUNTU_TAG_NAME=20.04")

    if args.zts:
        if version_info.patch_version.startswith("7."):
            additional_config_args.append("--enable-maintainer-zts")
        else:
            additional_config_args.append("--enable-zts")

    if not args.release:
        additional_config_args.append("--enable-debug")

    if args.clang:
        install_additional_packages.append("clang")
        flags.append("--build-arg CC=clang")

    if args.address_sanitizer:
        cflags = ["-fsanitize=address"]
        extension_cflags.extend(cflags)

        if version_info.version_id >= 80000:
            additional_config_args.append("--enable-address-sanitizer")
        else:
            php_cflags.extend(cflags)
            php_cflags.append("-DZEND_TRACK_ARENA_ALLOC")

        if version_info.version_id >= 70400:
            php_test_args.append("--asan")

        if version_info.version_id < 70400:
            # https://github.com/php/php-src/commit/6165c23475d5020cda3794cb684693a7fab9918d
            php_ldflags.append("-ldl")

    if args.undefined_sanitizer:
        cflags = ["-fsanitize=undefined", "-fno-sanitize-recover=undefined", "-fno-sanitize=object-size"]
        extension_cflags.extend(cflags)
        if version_info.version_id >= 80100:
            additional_config_args.append("--enable-undefined-sanitizer")
        else:
            php_cflags.extend(cflags)

    build_args = {
        "ADDITIONAL_PHP_CONFIG_ARGS": additional_config_args,
        "EXTENSION_CFLAGS": extension_cflags,
        "PHP_CFLAGS": php_cflags,
        "PHP_LDFLAGS": php_ldflags,
        "ADDITIONAL_PHP_TEST_ARGS": php_test_args,
        "INSTALL_ADDITIONAL_PACKAGES": install_additional_packages
    }
    for key, values in build_args.items():
        if values:
            flags.append("--build-arg %s=%s" % (key, shlex.quote(" ".join(values))))

    print("Building image for PHP %s (%s%s)â€¦" % (
        version_info.minor_version,
        "git branch %s, " % args.php_git_branch if args.php_git_branch else "",
        version_info.patch_version
    ))
    command = "docker build %s %s" % (" ".join(flags), shlex.quote(BASE_DIRECTORY))
    print("Executing build command: %s" % command)
    subprocess.check_call(command, shell=True)
    print("Successfully built image %s" % image_name)


def read_state_file():
    config = configparser.ConfigParser()
    config.read(STATE_FILENAME)
    return config


def write_state_file(config):
    config.write(open(STATE_FILENAME, "w"))


def set_configured_for_version(image_name):
    config = read_state_file()
    if image_name:
        config.set(config.default_section, CONFIGURED_FOR_IMAGE_OPTION, image_name)
    else:
        config.remove_option(config.default_section, CONFIGURED_FOR_IMAGE_OPTION)
    write_state_file(config)


def configure(args):
    set_configured_for_version(None)
    run_in_docker_container(args, "configure-extension")
    set_configured_for_version(get_image_name(args))


def ensure_configured_for_current_version(args):
    image_name = get_image_name(args)
    config = read_state_file()
    if config.get(config.default_section, CONFIGURED_FOR_IMAGE_OPTION, fallback=None) != image_name:
        configure(args)


def build(args):
    ensure_configured_for_current_version(args)
    command = "build-extension"
    if args.clean:
        command += " --clean"
    run_in_docker_container(args, command)


def test(args):
    ensure_configured_for_current_version(args)
    environment = {}
    if args.tests:
        environment["TESTS"] = " ".join(map(shlex.quote, args.tests))
    run_in_docker_container(args, "test-extension", environment)


def dist_clean(args):
    set_configured_for_version(None)
    run_in_docker_container(args, "clean-build-directory")


def shell(args):
    if not args.no_configure:
        ensure_configured_for_current_version(args)
    run_in_docker_container(args, "run-shell")


def sanitize_arguments(args):
    php_version = args.php_version
    if not re.fullmatch("[0-9]+\\.[0-9]+", php_version):
        raise RuntimeError("Illegal version number %s, the version should have the form <major>.<minor>" % php_version)

    linux_distribution = get_linux_distribution(args)
    use_sanitizer = args.address_sanitizer or args.undefined_sanitizer
    if linux_distribution == LinuxDistribution.ALPINE and use_sanitizer:
        raise RuntimeError("Sanitizers are currently not supported on Alpine since they don't support MUSL")


argument_parser = argparse.ArgumentParser(description="Build and test PHP extensions")
argument_parser.add_argument("--zts", action="store_true", help="Enable PHP thread safety")
argument_parser.add_argument("--docker-network", help="The name of the docker network to use for the container")
argument_parser.add_argument("--platform", help="Set the platform to use (e.g. linux/amd64 or linux/arm64)")

php_version = argument_parser.add_mutually_exclusive_group()
php_version.add_argument("--php-version", default="8.1", help="The PHP minor version")
php_version.add_argument("--php-git-branch",
                         help="A git tag or branch name from the main PHP repository (e.g. PHP-8.2 or php-8.1.11)")

build_type_group = argument_parser.add_mutually_exclusive_group()
build_type_group.add_argument("--debug", action="store_true", help="Enable PHP debug mode (default)")
build_type_group.add_argument("--release", action="store_true", help="Enable PHP release mode")

distribution_group = argument_parser.add_mutually_exclusive_group()
distribution_group.add_argument("--alpine", action="store_true", help="Use the Alpine Linux distribution (default)")
distribution_group.add_argument("--ubuntu", action="store_true", help="Use the Ubuntu Linux distribution")

compiler_group = argument_parser.add_mutually_exclusive_group()
compiler_group.add_argument("--gcc", action="store_true", help="Use GCC as a compiler (default)")
compiler_group.add_argument("--clang", action="store_true", help="Use Clang as a compiler")

argument_parser.add_argument("--address-sanitizer", action="store_true", help="Enable address sanitizer")
argument_parser.add_argument("--undefined-sanitizer", action="store_true", help="Enable undefined sanitizer")

subparsers = argument_parser.add_subparsers(help="Which command to run", dest="command", required=True)

build_image_parser = subparsers.add_parser("build-image", help="Build the docker image")
configure_parser = subparsers.add_parser("configure", help="Configure the extension in a container")

build_parser = subparsers.add_parser("build", help="Build the extension in a container")
build_parser.add_argument("--clean", action="store_true", help="Run make clean before the build")

test_parser = subparsers.add_parser("test", help="Test the extension in a container")
test_parser.add_argument("tests", help="The tests to execute", nargs="*")

dist_clean_parser = subparsers.add_parser("dist-clean", help="Clean the build directory")

shell_parser = subparsers.add_parser("shell", help="Open an interactive shell in a container")
shell_parser.add_argument("--no-configure", action="store_true", help="Don't automatically configure the extension")

arguments = argument_parser.parse_args()

try:
    sanitize_arguments(arguments)
    locals()[arguments.command.replace("-", "_")](arguments)
except BaseException as error:
    print("Error: %s" % error)
    exit(1)
